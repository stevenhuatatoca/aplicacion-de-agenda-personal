import tkinter as tk
from tkinter import ttk
from tkcalendar import DateEntry
from tkinter import messagebox

# Crear la ventana principal
root = tk.Tk()
root.title("Agenda Personal")
root.geometry("600x400")

# Frame para los controles de entrada de eventos
frame_controls = tk.Frame(root)
frame_controls.pack(side=tk.TOP, fill=tk.X)

# Frame para la lista de eventos (colocado debajo)
frame_events = tk.Frame(root)
frame_events.pack(side=tk.BOTTOM, fill=tk.BOTH, expand=True)

# Labels y campos de entrada
tk.Label(frame_controls, text="Fecha").grid(row=0, column=0, padx=5, pady=5)
date_entry = DateEntry(frame_controls, date_pattern='y-mm-dd')
date_entry.grid(row=0, column=1, padx=5, pady=5)

tk.Label(frame_controls, text="Hora").grid(row=1, column=0, padx=5, pady=5)
time_entry = tk.Entry(frame_controls)
time_entry.grid(row=1, column=1, padx=5, pady=5)

tk.Label(frame_controls, text="Descripción").grid(row=2, column=0, padx=5, pady=5)
description_entry = tk.Entry(frame_controls)
description_entry.grid(row=2, column=1, padx=5, pady=5)

# Función para agregar un evento
def add_event():
    date = date_entry.get()
    time = time_entry.get()
    description = description_entry.get()

    if not date or not time or not description:
        messagebox.showwarning("Entrada incompleta", "Todos los campos deben estar completos.")
        return

    # Insertar el evento en el TreeView
    tree.insert('', 'end', values=(date, time, description))

    # Limpiar los campos de entrada
    date_entry.set_date('')
    time_entry.delete(0, tk.END)
    description_entry.delete(0, tk.END)

# Función para eliminar un evento seleccionado
def delete_event():
    selected_item = tree.selection()

    if not selected_item:
        messagebox.showwarning("Eliminar", "Por favor, selecciona un evento para eliminar.")
        return

    # Confirmar antes de eliminar
    if messagebox.askyesno("Confirmar", "¿Estás seguro de que quieres eliminar este evento?"):
        tree.delete(selected_item)

# Botones de acciones
add_button = tk.Button(frame_controls, text="Agregar Evento", command=lambda: add_event())
add_button.grid(row=3, column=0, padx=5, pady=5)

delete_button = tk.Button(frame_controls, text="Eliminar Evento Seleccionado", command=lambda: delete_event())
delete_button.grid(row=3, column=1, padx=5, pady=5)

exit_button = tk.Button(frame_controls, text="Salir", command=root.quit)
exit_button.grid(row=3, column=2, padx=5, pady=5)

# Crear el TreeView para la lista de eventos (ahora en la parte inferior)
columns = ("Fecha", "Hora", "Descripción")
tree = ttk.Treeview(frame_events, columns=columns, show="headings")
tree.heading("Fecha", text="Fecha")
tree.heading("Hora", text="Hora")
tree.heading("Descripción", text="Descripción")
tree.pack(fill=tk.BOTH, expand=True)

# Iniciar la aplicación
root.mainloop()
